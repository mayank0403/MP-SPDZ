R = (1 << logR)
# no of features in DB
# assuming = c now
ftrs = c + 1

db = Matrix(R, ftrs, sint)
intervals = Matrix(c, 2, sint)
intervals_small = Matrix(c, 2, sint)

# cleartext at MP-SPDZ/plain.py

# use @for_range_opt for balanced optimization 
# but use Python loops if compile-time numbers are need (e.g., for players)

@for_range_opt_multithread(threads, R)
def _(i):
    # party 0 supplies the DB
    # which is secret shared here
    for j in range(ftrs):
        db[i][j] = sint(((i) % 65) + j)
        #db[i][j] = sint.get_input_from(0)

@for_range_opt(c)
def f(i):
    # party 1 supplies the intervals
    # which is secret shared here
    intervals[i][0] = sint(63)
    intervals[i][1] = sint(126)
    #intervals[i][0] = sint.get_input_from(1)
    #intervals[i][1] = sint.get_input_from(1)


#in_interval = Array(c, sint)
agg = sint(0)
#in_interval = sintbit(1)
in_interval_l = Matrix(R, c, sintbit)
in_interval_r = Matrix(R, c, sintbit)
in_interval_f = Array(R, sintbit)
activated_val = Array(R, sint)

@for_range_opt(R)
def fff(i):
    in_interval_f[i] = sintbit(1)

# option 0
#lft = Matrix(c, bucket_sz, sbitint)
#rgt = Matrix(c, bucket_sz, sbitint)
#@for_range_opt_multithread(threads, c)
#def fff(i):
    #lft_t = intervals[i][0].bit_decompose(bucket_sz)
    #rgt_t = intervals[i][1].bit_decompose(bucket_sz)
    #@for_range_opt(bucket_sz)
    #def fffg(j):
        #global lft
        #global rgt
        #lft[i][j] = lft_t[j]
        #rgt[i][j] = rgt_t[j]


@for_range_parallel(R, R)
def g(i):
    global agg
    global in_interval_l
    global in_interval_r
    global in_interval_f
    #global lft
    #global rgt
    @for_range_parallel(c, c)
    def h(j):
        global in_interval_l
        global in_interval_r
        global in_interval_f
        #global lft
        #global rgt
        # option 0, bucket_sz bitsiwth comparison by explicit bit decomp
        #db_small = db[i][j].bit_decompose(bucket_sz)
        #lft = intervals[j][0].bit_decompose(bucket_sz)
        #rgt = intervals[j][1].bit_decompose(bucket_sz)
        #in_interval_l[i][j] = sbitint.bit_less_than(lft[j], db_small)
        #in_interval_r[i][j] = sbitint.bit_less_than(db_small, rgt[j])
        
        # option 1, bucket_sz + 1 bitwidth comparison without explicit bit decomp
        in_interval_l[i][j] = intervals[j][0].less_than(db[i][j], bucket_sz)
        in_interval_r[i][j] = db[i][j].less_than(intervals[j][1], bucket_sz)
        
        # option 2, full bitwidth comparisons
        #in_interval_l[i][j] = (intervals[j][0] < db[i][j])
        #in_interval_r[i][j] = (intervals[j][1] > db[i][j])
        
        # common
        in_interval_f[i] = in_interval_f[i] & in_interval_l[i][j]
        in_interval_f[i] = in_interval_f[i] & in_interval_r[i][j]

@for_range_parallel(R, R)
def g(i):
    global activated_val
    global in_interval_f
    activated_val[i] = (in_interval_f[i]).if_else(db[i][ftrs - 1], sint(0))

@for_range_opt(R)
def g(i):
    global agg
    global activated_val
    agg = agg + activated_val[i]

agg = agg.reveal()
print_ln('log(B) = %s | log(R) = %s | #conds = %s | #threads %s', bucket_sz, logR, c, threads)
print_ln('Answer is: %s', agg)

#bts = (db[7][0]).bit_decompose(8)
#print_ln('%s', len(bts))
#for i in range(len(bts)):
    #bts[i] = bts[i].reveal()
    #print_ln('%d th bits is %s: ', (i, bts[i]))

#aa = sint(513)
#bb = sint(7)
#aaa = aa.bit_decompose(bucket_sz)
#bbb = bb.bit_decompose(bucket_sz)
#cp = sbitint.bit_less_than(aaa, bbb) 
#cp = cp.reveal()
#print_ln('x < y is %s', cp)
# this less_than with param 8 will do a 9-bit comparison
#cpp = aa.less_than(bb, bucket_sz)
#cpp = cpp.reveal()
#print_ln('x < y is %s', cpp)
#cpp = aa.less_than(bb)
#cpp = cpp.reveal()
#print_ln('x < y is %s', cpp)

