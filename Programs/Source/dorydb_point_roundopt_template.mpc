R = (1 << logR)
# no of features in DB
# assuming = c now
ftrs = c + 1

db = Matrix(R, ftrs, sint)
intervals = Matrix(c, 2, sint)
intervals_small = Matrix(c, 2, sint)

# cleartext at MP-SPDZ/plain.py

# use @for_range_opt for balanced optimization 
# but use Python loops if compile-time numbers are need (e.g., for players)

@for_range_opt_multithread(threads, R)
def _(i):
    for j in range(ftrs):
        db[i][j] = sint(((i) % 65) + j)

@for_range_opt(c)
def f(i):
    intervals[i][0] = sint(63)


agg = sint(0)
in_interval_l = Matrix(R, c, sintbit)
in_interval_f = Array(R, sintbit)
activated_val = Array(R, sint)

@for_range_opt(R)
def fff(i):
    in_interval_f[i] = sintbit(1)


@for_range_parallel(R, R)
def g(i):
    global agg
    global in_interval_l
    global in_interval_f
    for j in range(c):
        
        # option 1, bucket_sz bitwidth equality without explicit bit decomp
        in_interval_l[i][j] = intervals[j][0].equal(db[i][j], bucket_sz)
        
        # common
        in_interval_f[i] = in_interval_f[i] & in_interval_l[i][j]

@for_range_parallel(R, R)
def g(i):
    global activated_val
    global in_interval_f
    activated_val[i] = (in_interval_f[i]).if_else(db[i][ftrs - 1], sint(0))

@for_range_opt(R)
def g(i):
    global agg
    global activated_val
    agg = agg + activated_val[i]

agg = agg.reveal()
print_ln('log(B) = %s | log(R) = %s | #conds = %s | #threads %s', bucket_sz, logR, c, threads)
print_ln('Answer is: %s', agg)

